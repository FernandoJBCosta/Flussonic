% Set this to RTMP listening port
{rtmp,1935}.

% Set this to HTTP listening port. Use nginx or varnish to proxy requests from 80 port to this one
{http, 8080}.


% Enable this option ONLY if health checker breaks something in your production
% {disable_health, true}.

% Enable this ONLY if you have serious problems with mmap, such as segfault of erlang proces
% {file_access, file}.


% 'rewrite' section is for ondemand streaming.
% You can play rtmp://localhost/rtmp/cam0 or http://localhost:8080/cam0/manifest.f4m or http://localhost:8080/cam0/index.m3u8
% Add 'dvr' option with specifying folder where to store archive for writing stream info
% 'dvr_limit' option is for limiting archive size in minutes
% 'disk_limit' option is for limiting archive size in percents of used disk. Default is 95, use 'undefined' to disable it
%
% Later you can use following urls for playing 3600 seconds archive from unix timestamp 1345794842:
% HDS: http://localhost:8080/cam0/archive/1345794842/3600/manifest.f4m
% HLS: http://localhost:8080/cam0/archive/1345794842/3600/index.m3u8 or
%      http://localhost:8080/cam0/index-1345794842-3600.m3u8
%
%
% You have to specify URL for stream. It may be:
%  * rtsp://    for reading RTSP
%  * tshttp://  for mpeg transport streams via HTTP
%  * udp://     for reading UDP MPEG-TS
%  * hls://     for reading HLS
%  * file://    for reading files. Use  file://http://host/path for http_file usage
%  * 
%
% Mention, that not all kinds of streams and packetizing are supported in free version
%
{rewrite,"cam0","rtsp://root:root@axis-00408ca51334.local./axis-media/media.amp",[{dvr,"movies"},{dvr_limit,400},{disk_limit,95},{retry_limit,1}]}.

% Change 'rewrite' to 'stream' to make the stream persistent
% {stream, "cam1", "tshttp://dvb-transcoder:5043/", [{dvr, "movies"}]}.

% Following options for stream are supported:
%  {dvr, Root}  - archive stream in folder Root
%  {dvr_limit, Minutes}  - remove files, older than Minutes from now
%  {retry_limit, Limit}  - how many times to rerequest source
%  {source_timeout, MS}  - how many milliseconds to wait for frames from source
%  {clients_timeout, MS} - how many milliseconds to wait until last client request
%  {udp, "udp://IP:PORT"} - restream this stream to UDP. Multicast is possible
%  {tracks, [Track1, Track2]} - which tracks to use from RTSP source. Usually use {tracks, [1]} to take only video
%  {dump_rtsp, false} - don't print all RTSP traffic
%

% Uncomment following line to protect from unauthorized publishing.
% If turned on, use following stream name to publish:  livestream?login=LOGIN&password=PASSWORD
% {publish_password, "LOGIN:PASSWORD"}.


% Use 'include' to add autogenerated files
% {include, "streams.conf"}.

% Specify prefix for published streams.
% If you publish stream with name "stream", than watch it under http://localhost:8080/live/stream/manifest.f4m.
% You can also add some options to live section:
{live, "live"}.
% {live, "livedvr", [{dvr,"movies"}]}.


% Accept PUT mpegts streams
{mpegts,"mpegts"}.

% Serve files from "/var/movies" under prefix "/vod"
{file, "vod", "/var/movies"}.
{file, "securevod", "priv", [{sessions, "http://127.0.0.1:9292/auth"}]}.

% Reply with API handler, possibly protecting it with login/password for destructive actions
{api, [{admin,"admin","pass0"}]}.

% Send static files from this folder via HTTP
{root, "wwwroot"}.

